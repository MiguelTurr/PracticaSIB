Como nuestra base de datos es un archivo .csv necesitamos importarlo a neo4j para crear la base de
datos que vamos a trabajar, por lo que lo primero que necesitamos es cargarlo.

Con LOAD CSV cargaremos nuestra base de datos, debemos colocar el archivo en la carpeta de importaciones de NEO4J.
En mi caso como estoy usando linux estaría en /var/lib/neo4j/import y ahí colocamos el archivo.

Para limpiar la base de datos anterior, podemos usar el siguiente código:

MATCH (n)
DETACH DELETE n;

Una vez vacía la base de datos, con el siguiente código cargaremos todos los datos:

LOAD CSV WITH HEADERS FROM 'file:///db.csv' AS row
WITH row LIMIT 1000
MERGE (j:Jugador {

    nombre: row.long_name,
    fechaNacimiento: row.dob,
    equipo: row.club_name,
    altura: toInteger(row.height_cm),
    nacionalidad: row.nationality,
    pierna: row.preferred_foot,
    piernaMala: toInteger(row.weak_foot),
    general: toInteger(row.overall),
    potencial: toInteger(row.potential),
    valor: toInteger(row.value_eur),
    sueldo: toInteger(row.wage_eur),
    clausula: toInteger(row.release_clause_eur),
    contrato: toInteger(row.contract_valid_until),

    agresividad: toInteger(row.mentality_aggression),
    posicionamiento: toInteger(row.mentality_positioning),
    penaltis: toInteger(row.mentality_penalties),
    compostura: toInteger(row.mentality_composure),

    finalizacion: toInteger(row.attacking_finishing),
    regates: toInteger(row.skill_dribbling),
    remate: toInteger(row.attacking_heading_accuracy),
    tiroFalta: toInteger(row.skill_fk_accuracy),
    pasesCortos: toInteger(row.attacking_short_passing),
    pasesLargos: toInteger(row.skill_long_passing),
    control: toInteger(row.skill_ball_control),
    disparoLejano: toInteger(row.power_long_shots),
    marcaje: toInteger(row.defending_sliding_tackle),
    
    aceleracion: toInteger(row.movement_acceleration),
    velocidad: toInteger(row.movement_sprint_speed),
    agilidad: toInteger(row.movement_agility),
    salto: toInteger(row.power_jumping),
    resistencia: toInteger(row.power_stamina),
    
    porteroSalto: toInteger(row.goalkeeping_diving),
    porteroParada: toInteger(row.goalkeeping_handling),
    porteroGolpeo: toInteger(row.goalkeeping_kicking),
    porteroPosicion: toInteger(row.goalkeeping_positioning),
    porteroReflejos: toInteger(row.goalkeeping_reflexes)})
WITH j, row
UNWIND split(row.player_positions, ', ') AS pos
MERGE (p:Posicion {posicion: pos})
MERGE (j)-[:JUEGA_COMO]->(p);

Esto nos creará los nodos de Jugador y Posicion, con su relación JUEGA_COMO y añadirá las diferentes
propiedades a estos.

Con este código uniremos las propiedades de pierna y piernaMala en una sola teniendo las opciones de
diestro, zurdo o ambidiestro.

MATCH (j:Jugador)
WHERE j.piernaMala > 3
SET j.pierna = 'Ambidiestro';

Eliminamos la propiedad 'piernaMala' de todos los nodos de jugadores.

MATCH (j:Jugador)
SET j.piernaMala = null;

Creamos un usuario para poder probar la aplicación

MERGE (u:Usuario { nombre: 'PepeCortez' });